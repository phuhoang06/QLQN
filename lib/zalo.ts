// Zalo OA API utilities
export interface ZaloUser {
  user_id: string
  display_name: string
  avatar?: string
}

export interface ZaloMessage {
  recipient: {
    user_id: string
  }
  message: {
    text: string
  }
}

export interface ZaloBroadcastMessage {
  message: {
    text: string
  }
}

class ZaloAPI {
  private accessToken: string
  private appId: string
  private appSecret: string

  constructor() {
    this.accessToken = process.env.ZALO_OA_ACCESS_TOKEN || ''
    this.appId = process.env.ZALO_OA_APP_ID || ''
    this.appSecret = process.env.ZALO_OA_APP_SECRET || ''
  }

  // L·∫•y access token m·ªõi (n·∫øu c·∫ßn refresh)
  async getAccessToken(): Promise<string> {
    if (!this.appId || !this.appSecret) {
      throw new Error('Zalo OA App ID ho·∫∑c App Secret ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh')
    }

    const response = await fetch('https://oauth.zaloapp.com/v4/oa/access_token', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: new URLSearchParams({
        grant_type: 'client_credentials',
        client_id: this.appId,
        client_secret: this.appSecret,
      }),
    })

    if (!response.ok) {
      throw new Error('Kh√¥ng th·ªÉ l·∫•y access token t·ª´ Zalo OA')
    }

    const data = await response.json()
    return data.access_token
  }

  // G·ª≠i tin nh·∫Øn cho 1 ng∆∞·ªùi
  async sendMessage(userId: string, message: string): Promise<boolean> {
    try {
      const accessToken = this.accessToken || await this.getAccessToken()
      
      const response = await fetch('https://openapi.zalo.me/v2.0/oa/message', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'access_token': accessToken,
        },
        body: JSON.stringify({
          recipient: {
            user_id: userId
          },
          message: {
            text: message
          }
        }),
      })

      if (!response.ok) {
        const error = await response.text()
        console.error('Zalo API Error:', error)
        return false
      }

      return true
    } catch (error) {
      console.error('Error sending Zalo message:', error)
      return false
    }
  }

  // G·ª≠i tin nh·∫Øn broadcast cho nhi·ªÅu ng∆∞·ªùi
  async sendBroadcast(userIds: string[], message: string): Promise<{ success: number, failed: number }> {
    let success = 0
    let failed = 0

    // Zalo OA c√≥ gi·ªõi h·∫°n 40 tin/ng∆∞·ªùi/th√°ng, n√™n g·ª≠i tu·∫ßn t·ª± ƒë·ªÉ tr√°nh spam
    for (const userId of userIds) {
      const result = await this.sendMessage(userId, message)
      if (result) {
        success++
      } else {
        failed++
      }
      
      // Delay 1 gi√¢y gi·ªØa c√°c tin nh·∫Øn ƒë·ªÉ tr√°nh rate limit
      await new Promise(resolve => setTimeout(resolve, 1000))
    }

    return { success, failed }
  }

  // L·∫•y th√¥ng tin user t·ª´ Zalo
  async getUserInfo(userId: string): Promise<ZaloUser | null> {
    try {
      const accessToken = this.accessToken || await this.getAccessToken()
      
      const response = await fetch(`https://openapi.zalo.me/v2.0/oa/getprofile?data={"user_id":"${userId}"}`, {
        method: 'GET',
        headers: {
          'access_token': accessToken,
        },
      })

      if (!response.ok) {
        return null
      }

      const data = await response.json()
      return {
        user_id: data.user_id,
        display_name: data.display_name,
        avatar: data.avatar
      }
    } catch (error) {
      console.error('Error getting Zalo user info:', error)
      return null
    }
  }

  // Ki·ªÉm tra xem c√≥ th·ªÉ g·ª≠i tin nh·∫Øn kh√¥ng
  canSendMessage(): boolean {
    return !!(this.accessToken || (this.appId && this.appSecret))
  }
}

export const zaloAPI = new ZaloAPI()

// Template tin nh·∫Øn
export const messageTemplates = {
  // Nh·∫Øc n·ªôp ti·ªÅn
  reminder: (userName: string, week: number, amount: number, dueDate: string) => 
    `üîî Nh·∫Øc nh·ªü ƒë√≥ng qu·ªπ\n\nXin ch√†o ${userName}!\n\nTu·∫ßn ${week} ƒë√£ ƒë·∫øn h·∫°n ƒë√≥ng qu·ªπ:\nüí∞ S·ªë ti·ªÅn: ${amount.toLocaleString('vi-VN')} VNƒê\nüìÖ H·∫°n n·ªôp: ${dueDate}\n\nVui l√≤ng ƒë√≥ng ti·ªÅn ƒë√∫ng h·∫°n ƒë·ªÉ tr√°nh b·ªã ph·∫°t.\n\nC·∫£m ∆°n b·∫°n!`,

  // B√°o n·ª£ v√† ph·∫°t
  overdue: (userName: string, week: number, amount: number, penalty: number, dueDate: string) =>
    `‚ö†Ô∏è C·∫£nh b√°o qu√° h·∫°n\n\nXin ch√†o ${userName}!\n\nB·∫°n ƒë√£ qu√° h·∫°n ƒë√≥ng qu·ªπ tu·∫ßn ${week}:\nüí∞ S·ªë ti·ªÅn g·ªëc: ${amount.toLocaleString('vi-VN')} VNƒê\nüí∏ Ti·ªÅn ph·∫°t: ${penalty.toLocaleString('vi-VN')} VNƒê\nüìÖ H·∫°n n·ªôp: ${dueDate}\n\nT·ªïng c·ªông c·∫ßn ƒë√≥ng: ${(amount + penalty).toLocaleString('vi-VN')} VNƒê\n\nVui l√≤ng ƒë√≥ng ti·ªÅn ngay ƒë·ªÉ tr√°nh ph·∫°t th√™m.\n\nC·∫£m ∆°n b·∫°n!`,

  // Th·ªëng k√™ cu·ªëi th√°ng
  monthlyReport: (userName: string, month: string, totalPaid: number, totalUnpaid: number, totalPenalty: number) =>
    `üìä B√°o c√°o th√°ng ${month}\n\nXin ch√†o ${userName}!\n\nT√¨nh h√¨nh ƒë√≥ng qu·ªπ th√°ng ${month}:\n‚úÖ ƒê√£ ƒë√≥ng: ${totalPaid.toLocaleString('vi-VN')} VNƒê\n‚ùå Ch∆∞a ƒë√≥ng: ${totalUnpaid.toLocaleString('vi-VN')} VNƒê\nüí∏ Ti·ªÅn ph·∫°t: ${totalPenalty.toLocaleString('vi-VN')} VNƒê\n\nC·∫£m ∆°n b·∫°n ƒë√£ tham gia!`,

  // Th√¥ng b√°o ƒë√£ ƒë√≥ng th√†nh c√¥ng
  paidSuccess: (userName: string, week: number, amount: number) =>
    `‚úÖ X√°c nh·∫≠n ƒë√≥ng qu·ªπ\n\nXin ch√†o ${userName}!\n\nB·∫°n ƒë√£ ƒë√≥ng qu·ªπ tu·∫ßn ${week} th√†nh c√¥ng:\nüí∞ S·ªë ti·ªÅn: ${amount.toLocaleString('vi-VN')} VNƒê\n\nC·∫£m ∆°n b·∫°n!`
}
