import { NextRequest, NextResponse } from 'next/server'
import { zaloAPI, messageTemplates } from '@/lib/zalo'
import { supabase } from '@/lib/supabase'

export async function POST(request: NextRequest) {
  try {
    const { messageType, week, customMessage } = await request.json()

    if (!zaloAPI.canSendMessage()) {
      return NextResponse.json(
        { error: 'Zalo OA ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh' },
        { status: 400 }
      )
    }

    // L·∫•y danh s√°ch t·∫•t c·∫£ user active
    const { data: users, error } = await supabase
      .from('users')
      .select('id, name, phone')
      .eq('status', 'active')

    if (error || !users || users.length === 0) {
      return NextResponse.json(
        { error: 'Kh√¥ng c√≥ user n√†o ƒë·ªÉ g·ª≠i tin nh·∫Øn' },
        { status: 404 }
      )
    }

    let message = customMessage || ''

    // N·∫øu kh√¥ng c√≥ custom message, t·∫°o message theo template
    if (!customMessage) {
      switch (messageType) {
        case 'weekly_reminder':
          message = `üîî Nh·∫Øc nh·ªü ƒë√≥ng qu·ªπ tu·∫ßn ${week}\n\nXin ch√†o t·∫•t c·∫£ th√†nh vi√™n!\n\nTu·∫ßn ${week} ƒë√£ ƒë·∫øn h·∫°n ƒë√≥ng qu·ªπ.\nVui l√≤ng ƒë√≥ng ti·ªÅn ƒë√∫ng h·∫°n ƒë·ªÉ tr√°nh b·ªã ph·∫°t.\n\nC·∫£m ∆°n c√°c b·∫°n!`
          break
        case 'monthly_report':
          // L·∫•y th·ªëng k√™ th√°ng
          const currentMonth = new Date().toLocaleDateString('vi-VN', { month: 'long', year: 'numeric' })
          message = `üìä B√°o c√°o th√°ng ${currentMonth}\n\nXin ch√†o t·∫•t c·∫£ th√†nh vi√™n!\n\nB√°o c√°o t√¨nh h√¨nh ƒë√≥ng qu·ªπ th√°ng ${currentMonth} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.\nVui l√≤ng ki·ªÉm tra dashboard ƒë·ªÉ xem chi ti·∫øt.\n\nC·∫£m ∆°n c√°c b·∫°n!`
          break
        default:
          return NextResponse.json(
            { error: 'Lo·∫°i tin nh·∫Øn kh√¥ng h·ª£p l·ªá' },
            { status: 400 }
          )
      }
    }

    // L·∫•y danh s√°ch phone numbers (gi·∫£ s·ª≠ phone = Zalo user_id)
    const phoneNumbers = users.map(user => user.phone)

    // G·ª≠i broadcast
    const result = await zaloAPI.sendBroadcast(phoneNumbers, message)

    return NextResponse.json({
      success: true,
      message: `ƒê√£ g·ª≠i tin nh·∫Øn cho ${result.success}/${phoneNumbers.length} th√†nh vi√™n`,
      details: result
    })

  } catch (error) {
    console.error('Error sending broadcast:', error)
    return NextResponse.json(
      { error: 'C√≥ l·ªói x·∫£y ra khi g·ª≠i broadcast' },
      { status: 500 }
    )
  }
}


